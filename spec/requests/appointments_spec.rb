# frozen_string_literal: true

require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to test the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator. If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails. There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/appointments', type: :request do
  let(:correct_user) do
    User.create!(
      email: 'user@example.com',
      password: 'Password!23',
      admin: false,
      first_name: 'Billie Joe',
      last_name: 'Armstrong'
    )
  end

  let(:incorrect_user) do
    User.create!(
      email: 'user2@example.com',
      password: 'Password!23',
      admin: false,
      first_name: 'John',
      last_name: 'Smith'
    )
  end

  let(:admin) do
    User.create!(
      email: 'admin@example.com',
      password: 'Password!23',
      admin: true,
      first_name: 'Gerard',
      last_name: 'Way'
    )
  end

  let(:valid_attributes) do
    {}
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  let(:valid_headers) do
    {}
  end

  describe 'GET /users/:user_id/appointments' do
    context 'when unauthenticated' do
      it 'returns an unauthenticated response' do
        get user_appointments_path(user_id: correct_user.id)
        expect(response).to be_unauthorized
      end
    end

    context 'when authenticated' do
      context 'when not the relevant user or admin' do
        before do
          post '/users/sign_in', params: {
            user: {
              email: incorrect_user.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns an unauthorized response' do
          get user_appointments_path(user_id: correct_user.id), headers: { Authorization: @token }
          expect(response).to be_unauthorized
        end
      end

      context 'when the relevant user' do
        before do
          post '/users/sign_in', params: {
            user: {
              email: correct_user.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns a successful response' do
          get user_appointments_path(user_id: correct_user.id), headers: { Authorization: @token }
          expect(response).to be_successful
        end
      end

      context 'when admin' do
        before do
          post '/users/sign_in', params: {
            user: {
              email: admin.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns a successful response' do
          get user_appointments_path(user_id: correct_user.id), headers: { Authorization: @token }
          expect(response).to be_successful
        end
      end
    end
  end

  describe 'GET /users/:user_id/appointments/:id' do
    context 'when unauthenticated' do
      let(:appointment) { create(:appointment, client: correct_user, admin:) }

      it 'returns an unauthenticated response' do
        get user_appointments_path(user_id: correct_user.id, id: appointment.id)
        expect(response).to be_unauthorized
      end
    end

    context 'when authenticated' do
      context 'when not the relevant user or admin' do
        let(:appointment) { create(:appointment, client: correct_user, admin:) }

        before do
          post '/users/sign_in', params: {
            user: {
              email: incorrect_user.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns an unauthorized response' do
          get user_appointments_path(user_id: correct_user.id, id: appointment.id), headers: { Authorization: @token }
          expect(response).to be_unauthorized
        end
      end

      context 'when the relevant user' do
        let(:appointment) { create(:appointment, client: correct_user, admin:) }

        before do
          post '/users/sign_in', params: {
            user: {
              email: correct_user.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns a successful response' do
          get user_appointments_path(user_id: correct_user.id, id: appointment.id), headers: { Authorization: @token }
          expect(response).to be_successful
        end
      end

      context 'when admin' do
        let(:appointment) { create(:appointment, client: correct_user, admin:) }

        before do
          post '/users/sign_in', params: {
            user: {
              email: admin.email,
              password: 'Password!23'
            }
          }
          @token = response.headers['authorization']
        end

        it 'returns a successful response' do
          get user_appointments_path(user_id: correct_user.id, id: appointment.id), headers: { Authorization: @token }
          expect(response).to be_successful
        end
      end
    end
  end

  # describe 'GET /confirmed_appointments' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /pending_appointments' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /available_appointments' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /users/:user_id/appointments/by_date/:appointment_date' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /users/:user_id/appointments/by_date/:appointment_date' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /users/:user_id/appointments/by_date/:appointment_date' do
  #   skip
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end

  # describe 'GET /users/:user_id/appointments/by_date/:appointment_date' do
  #   context 'when unauthenticated' do
  #     it 'returns an unauthenticated response' do
  #       expect(response).to be_unauthorized
  #     end
  #   end

  #   context 'when authenticated' do
  #     context 'when not the relevant user or admin' do
  #       it 'returns an unauthorized response' do
  #         expect(response).to be_unauthorized
  #       end
  #     end

  #     context 'when the relevant user or admin' do
  #       it 'returns a successful response' do
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  # end
end
